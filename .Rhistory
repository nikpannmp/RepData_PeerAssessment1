mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch=19, cex=2, cols1[newClust2])
points(x, y, pch=19, cex=2, col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(cmat, centers = 3)
kmeans(x, centers = 3)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black","red","green"), pch=3, cex=3, lwd=3)
plot(x, y, col=kmeans(dateFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
sounrce("addPatt.R", local=TRUE)
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp((scale(mat)))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- svd1$u[,1] %*% svd1$d[1])
a1 <- svd1$u[,1] %*% svd1$d[1]
a1 <- (svd1$u[,1]) %*% (svd1$d[1])
a1 <- (svd1$u[,1]) * (svd1$d[1]) %*% svd1$v
a1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1]
myImage(a1)
a2 <- svd1$u[,1:2] %*%  diag(svd1$d[1:2])  %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*%  diag(svd1$d[1:5])  %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*%  diag(svd1$d[1:10])  %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[, 10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,10:12], maxCon)
mdist <- dist(sub1[,10:12])
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)])
kClust <- kmeans(sub1[,-c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6, 100)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch=19, ylab="Walkdown Cluster")
library(swirl)
swirl()
dim(pm0)
head(pm0)
names(cnames)
print(cnames)
cnames <- strsplit(cnames, "|", fixed = TRUE)
print(cnames)
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
srt(x0)
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative <- x1<0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), %Y%m%d)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
str(both)
print(both)
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site == 36)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, Country.Code == 63 & Site.ID == 2008)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm0sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date)
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(mean(pm25), lwd = 2, )
abline(median(x0sub, na.rm = TRUE), lwd = 2)
?abline
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
plot(dates1, x1sub, pch = 20)
plot(dates0, x0sub, pch = 20)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <-range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean(), na.rm = TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
srt(mn0)
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5,2.5)))
with(mrg, points(rep(2,52), mrg[,3]))
segment(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y, ]
setwd("~/Documents/GitHub/RepData_PeerAssessment1")
if (!file.exists("activity")) {
unzip(zipFile)
}
zipUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
zipFile <- "activity.zip"
if(!file.exists(zipFile)) {
download.file(fileUrl, zipFile, method="curl")
}
#Unzips file:
if (!file.exists("activity")) {
unzip(zipFile)
}
?read.csv
activity <- read.csv("activity.csv")
head(activity)
activity <- read.csv("activity.csv", sep = ",", na.strings = "NA")
?hist
with(activity, hist(steps, date))
with(activity, hist(steps))
steps_per_day <- aggregate(activity$steps, by = activity$date, FUN = sum, na.rm = TRUE)
activity$date <- as.POSIXct(activity$date, format = "%Y-%m-%d")
activity_data <- data.frame(activity)
head(activity_data)
steps_per_day <- aggregate_data(activity$steps, by = activity$date, FUN = sum, na.rm = TRUE)
hist(steps_per_day)
steps_per_day <- aggregate(activity_data$steps, by = activity_data$date, FUN = sum, na.rm = TRUE)
hist(steps_per_day)
type(activity_data)
str(activity_data)
str(steps_per_dat)
str(steps_per_day)
steps_per_day <- aggregate(activity_data$steps, by = activity_data$date, FUN = sum, na.rm = TRUE)
steps_per_day <- aggregate(activity_data$steps, by = list(activity_data$date), FUN = sum, na.rm = TRUE)
hist(steps_per_day)
head(steps_per_day)
head(steps_per_day$x)
hist(steps_per_day$x)
plot(steps_per_day$x)
steps_per_day$x
steps_per_day
mean(steps_per_day$x)
median(steps_per_day$x)
steps_per_day <- aggregate(activity_data$steps, by = list(activity_data$date), FUN = sum, na.rm = TRUE)
hist(steps_per_day$x)
mean(steps_per_day$x)
median(steps_per_day$x)
hist(steps_per_day$x, main = "Total number of steps taken each day", xlab = "Total steps per day")
steps_per_interval <- aggregate(activity_data$steps, by = list(activity_data$interval), FUN = mean, na.rm = TRUE)
head(steps_per_interval)
plot(steps_per_interval$Group.1, steps_per_interval$x, type = "l")
plot(steps_per_interval$Group.1, steps_per_interval$x, type = "l",
main = "Average number of steps per interval",
xlab = "Interval", ylab = "Avg. nuber of steps")
?max
max(steps_per_interval$x)
which(steps_per_interval$Group.1 == max(steps_per_interval$x))
position <- which(steps_per_interval$x == max(steps_per_interval$x))
steps_per_interval[position,]
steps_per_interval[position, 1]
sum(activity_data$date, na.rm = FALSE)
sum(is.na(activity_data$steps))
?grepl
?rep
mean(steps_per_day$x)
na_position <- which(is.na(activity_data$steps))
missing_mean <- rep(mean(activity_data$steps, na.rm = TRUE), times = lenght(na_position))
activity_data[na_position, "staps"] <- missing_mean
na_position <- which(is.na(activity_data$steps))
missing_mean <- rep(mean(activity_data$steps, na.rm = TRUE), times = length(na_position))
activity_data[na_position, "staps"] <- missing_mean
head(activity_data)
na_position <- which(is.na(activity_data$steps))
missing_mean <- rep(mean(activity_data$steps, na.rm = TRUE), times = length(na_position))
#Create new dataset
activity_data[na_position, "steps"] <- missing_mean
head(activity_data)
sum(is.na(activity_data$steps))
#Replace missing values with mean of the day
na_position <- which(is.na(activity_data$steps))
missing_mean <- rep(mean(activity_data$steps, na.rm = TRUE), times = length(na_position))
#Create new dataset
activity_data[na_position, "steps"] <- missing_mean
#Histogram of the total number of steps taken each day
steps_per_day <- aggregate(activity_data$steps, by = list(activity_data$date), FUN = sum)
hist(steps_per_day$x, main = "Total number of steps taken each day", xlab = "Total steps per day")
#Mean of the total number of steps taken per day
mean(steps_per_day$x)
#Median of the total number of steps taken per day
median(steps_per_day$x)
hist(steps_per_day$x, main = "Total number of steps taken each day", xlab = "Total steps per day")
#Number of steps per day
steps_per_day <- aggregate(activity_data$steps, by = list(activity_data$date), FUN = sum, na.rm = TRUE)
#Checks if file exists and download the file:
zipUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
zipFile <- "activity.zip"
if(!file.exists(zipFile)) {
download.file(fileUrl, zipFile, method="curl")
}
#Unzips file:
if (!file.exists("activity")) {
unzip(zipFile)
}
#Read file
activity <- read.csv("activity.csv", header = TRUE, sep = ",", na.strings = "NA")
#Process data
activity$date <- as.POSIXct(activity$date, format = "%Y-%m-%d")
activity_data <- data.frame(activity)
#Number of steps per day
steps_per_day <- aggregate(activity_data$steps, by = list(activity_data$date), FUN = sum, na.rm = TRUE)
hist(steps_per_day$x, main = "Total number of steps taken each day", xlab = "Total steps per day")
#Mean of the total number of steps taken per day
mean(steps_per_day$x)
#Median of the total number of steps taken per day
median(steps_per_day$x)
#Average number of steps per interval
steps_per_interval <- aggregate(activity_data$steps, by = list(activity_data$interval), FUN = mean, na.rm = TRUE)
#Plot of average number of steps per interval
plot(steps_per_interval$Group.1, steps_per_interval$x, type = "l",
main = "Average number of steps per interval",
xlab = "Interval", ylab = "Avg. number of steps")
#Find interval with maximum number of steps
position <- which(steps_per_interval$x == max(steps_per_interval$x))
steps_per_interval[position, 1]
#Sum of missing values
sum(is.na(activity_data$steps))
#Replace missing values with mean of the day
na_position <- which(is.na(activity_data$steps))
missing_mean <- rep(mean(activity_data$steps, na.rm = TRUE), times = length(na_position))
#Create new dataset
activity_data[na_position, "steps"] <- missing_mean
#Histogram of the total number of steps taken each day
steps_per_day <- aggregate(activity_data$steps, by = list(activity_data$date), FUN = sum)
hist(steps_per_day$x, main = "Total number of steps taken each day", xlab = "Total steps per day")
#Mean of the total number of steps taken per day
mean(steps_per_day$x)
#Median of the total number of steps taken per day
median(steps_per_day$x)
#Mean of the total number of steps taken per day
mean(steps_per_day$x)
#Median of the total number of steps taken per day
median(steps_per_day$x)
?weekdays
activity_data$dayofweek <- weekdays(activity_data$date)
head(activity_data)
head(activity_data, 50)
tail(activity_data)
tail(activity_data, 50)
steps_per_weekday <- aggregate(activity_data$steps, by = list(activity_data$dayofweek), FUN = sum)
head(steps_per_weekday)
steps_per_weekday <- aggregate(activity_data$steps, by = list(activity_data$dayofweek), FUN = mean)
head(steps_per_weekday)
head(steps_per_weekday, 10)
?subset
weekdays <- subset(steps_per_weekday, Group.1 = c("Monay", "Tuesday", "Wednesday", "Thursday", "Friday"))
head(weekdays)
weekends <- subset(steps_per_weekday, Group.1 = c("Saturday", "Sunday"))
head(weekends)
weekends <- subset(steps_per_weekday, Group.1 == c("Saturday", "Sunday"))
weekends <- subset(steps_per_weekday, subset=(Group.1 = c("Saturday", "Sunday")))
weekends <- subset(steps_per_weekday, subset=(steps_per_weekday$Group.1 = c("Saturday", "Sunday")))
weekends <- subset(steps_per_weekday, select = c("Saturday", "Sunday"))
weekends <- subset(steps_per_weekday$Group.1, select = c("Saturday", "Sunday"))
weekends <- subset(steps_per_weekday$Group.1, subset = c("Saturday", "Sunday"))
weekends <- subset(steps_per_weekday$Group.1, subset = (Group.1 == c("Saturday", "Sunday"))
weekends <- subset(steps_per_weekday$Group.1, subset = (Group.1 == c("Saturday", "Sunday")))
steps_per_weekday
?names
steps_per_weekday <- aggregate(activity_data$steps, by = list(activity_data$dayofweek), FUN = mean)
colnames(steps_per_weekday) <- c("Day", "Staps")
head(steps_per_weekday)
steps_per_weekday <- aggregate(activity_data$steps, by = list(activity_data$dayofweek), FUN = mean)
colnames(steps_per_weekday) <- c("Day", "Steps")
weekends <- subset(steps_per_weekday, Day = c("Saturday", "Sunday"))
head(weekends)
weekends <- subset(steps_per_weekday, select=(Day = c("Saturday", "Sunday")))
weekends <- subset(steps_per_weekday, select=(Day == c("Saturday", "Sunday")))
head(weekends)
weekends <- subset(steps_per_weekday, select=(Day == "Saturday" && "Sunday"))
head(weekends)
weekends <- subset(steps_per_weekday, select=c(Day, Steps), subset = (Day == "Saturday" && "Sunday"))
head(weekends)
weekends <- subset(steps_per_weekday, subset = (Day == "Saturday" | "Sunday"))
weekends <- subset(steps_per_weekday, subset = (Day == "Saturday" || "Sunday"))
weekends <- subset(steps_per_weekday, subset = (Day == c("Saturday", "Sunday"))
weekends <- subset(steps_per_weekday, subset = (Day == c("Saturday", "Sunday")))
head(activity_data)
activity_data$dayofweek <- weekdays(activity_data$date)
activity_data$daytype <- ifelse(activity_data$dayofweek == "saturday" |
activity_raw$weekday == "sunday", "weekend", "weekday")
activity_data$daytype <- ifelse(activity_data$dayofweek == "saturday" |
activity_data$dayofweek == "sunday", "weekend", "weekday")
head(activity_data)
steps_per_weekday <- aggregate(activity_data$steps, by = list(activity_data$daytype), FUN = mean)
head(steps_per_weekday)
with(steps_per_weekday, plot(Group.1, x, type = "l",
main = "Average number of steps per interval",
xlab = "Interval", ylab = "Avg. number of steps"))
steps_per_weekday <- aggregate(activity_data$steps, by = list(activity_data$daytype,
activity_data$dayofweek,
activity_data$interval), FUN = mean)
head(steps_per_weekday)
names(steps_per_weekday) <- c("daytype", "weekday", "interval", "mean")
head(steps_per_weekday)
xyplot(mean ~ interval | daytype, mean_data,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
library(lattice)
xyplot(mean ~ interval | daytype, mean_data,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
xyplot(mean ~ interval | daytype, steps_per_day,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
xyplot(mean ~ interval | daytype, steps_per_weekend,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
activity_data$dayofweek <- weekdays(activity_data$date)
activity_data$daytype <- ifelse(activity_data$dayofweek == "saturday" |
activity_data$dayofweek == "sunday", "weekend", "weekday")
steps_per_weekday <- aggregate(activity_data$steps, by = list(activity_data$daytype,
activity_data$dayofweek,
activity_data$interval), FUN = mean)
names(steps_per_weekday) <- c("daytype", "weekday", "interval", "mean")
xyplot(mean ~ interval | daytype, steps_per_weekend,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
head(steps_per_weekday)
xyplot(mean ~ interval | daytype, steps_per_weekday,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
activity_data$dayofweek <- weekdays(activity_data$date)
activity_data$daytype <- ifelse(activity_data$dayofweek == "saturday" |
activity_data$dayofweek == "sunday", "weekend", "weekday")
steps_per_weekday <- aggregate(activity_data$steps, by = list(activity_data$daytype,
activity_data$dayofweek,
activity_data$interval), FUN = mean)
names(steps_per_weekday) <- c("daytype", "weekday", "interval", "mean")
xyplot(mean ~ interval | daytype, steps_per_weekday,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
xyplot(mean ~ interval | daytype, steps_per_weekday,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(2,1))
head(steps_per_weekday)
xyplot(mean ~ interval | daytype, steps_per_weekday,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
activity_data$dayofweek <- weekdays(activity_data$date)
activity_data$daytype <- ifelse(activity_data$dayofweek == "saturday" |
activity_data$dayofweek == "sunday", "weekend", "weekday")
steps_per_weekday <- aggregate(activity_data$steps, by = list(activity_data$daytype,
activity_data$dayofweek,
activity_data$interval), FUN = mean)
names(steps_per_weekday) <- c("daytype", "weekday", "interval", "mean")
xyplot(mean ~ interval | daytype, steps_per_weekday,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
#Checks if file exists and download the file:
zipUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
zipFile <- "activity.zip"
if(!file.exists(zipFile)) {
download.file(fileUrl, zipFile, method="curl")
}
#Unzips file:
if (!file.exists("activity")) {
unzip(zipFile)
}
#Read file
activity <- read.csv("activity.csv", header = TRUE, sep = ",", na.strings = "NA")
#Process data
activity$date <- as.POSIXct(activity$date, format = "%Y-%m-%d")
activity_data <- data.frame(activity)
#Number of steps per day
steps_per_day <- aggregate(activity_data$steps, by = list(activity_data$date), FUN = sum, na.rm = TRUE)
hist(steps_per_day$x, main = "Total number of steps taken each day", xlab = "Total steps per day")
#Mean of the total number of steps taken per day
mean(steps_per_day$x)
#Median of the total number of steps taken per day
median(steps_per_day$x)
#Sum of missing values
sum(is.na(activity_data$steps))
#Replace missing values with mean of the day
na_position <- which(is.na(activity_data$steps))
missing_mean <- rep(mean(activity_data$steps, na.rm = TRUE), times = length(na_position))
#Create new dataset
activity_data[na_position, "steps"] <- missing_mean
#Histogram of the total number of steps taken each day
steps_per_day <- aggregate(activity_data$steps, by = list(activity_data$date), FUN = sum)
hist(steps_per_day$x, main = "Total number of steps taken each day", xlab = "Total steps per day")
#Mean of the total number of steps taken per day
mean(steps_per_day$x)
#Median of the total number of steps taken per day
median(steps_per_day$x)
library(lattice)
#Weekday and weekend variables
activity_data$dayofweek <- weekdays(activity_data$date)
activity_data$daytype <- ifelse(activity_data$dayofweek == "saturday" |
activity_data$dayofweek == "sunday", "weekend", "weekday")
steps_per_weekday <- aggregate(activity_data$steps, by = list(activity_data$daytype,
activity_data$dayofweek,
activity_data$interval), FUN = mean)
names(steps_per_weekday) <- c("daytype", "weekday", "interval", "mean")
xyplot(mean ~ interval | daytype, steps_per_weekday,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
